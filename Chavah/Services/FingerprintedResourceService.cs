using Microsoft.AspNetCore.Hosting;
using Microsoft.Extensions.Logging;
using System.IO;
using System.Text.RegularExpressions;
using System.Threading.Tasks;
using System;

namespace BitShuva.Chavah.Services;

/// <summary>
/// Service that gets the fingerprinted JS and CSS files generated by the npm build script.
/// </summary>
public class FingerprintedResourceService
{
    private readonly IWebHostEnvironment webHost;
    private readonly ILogger<FingerprintedResourceService> logger;
    private FingerprintedResources? resources;

    /// <summary>
    /// Creates the service.
    /// </summary>
    /// <param name="webHost"></param>
    /// <param name="logger"></param>
    public FingerprintedResourceService(
        IWebHostEnvironment webHost,
        ILogger<FingerprintedResourceService> logger)
    {
        this.webHost = webHost;
        this.logger = logger;
    }

    /// <summary>
    /// Gets the fingerprinted resources asynchronously.
    /// </summary>
    /// <returns></returns>
    public async Task<FingerprintedResources> GetResourcesAsync()
    {
        if (this.resources != null)
        {
            return this.resources;
        }

        try
        {
            this.resources = await LoadFingerprintedResources();
            return this.resources;
        }
        catch (Exception error)
        {
            logger.LogError(error, "Unable to fetch fingerprinted resources due to an error.");
            throw;
        }
    }

    private async Task<FingerprintedResources> LoadFingerprintedResources()
    {
        var indexHtmlPath = Path.Combine(this.webHost.WebRootPath, "index.html");
        var indexHtml = await System.IO.File.ReadAllTextAsync(indexHtmlPath);

        var jsRegex = new Regex("(/code/index.\\w+.js)");
        var jsMatch = jsRegex.Match(indexHtml);
        var jsUrl = jsMatch != null && jsMatch.Captures.Count > 0 ? jsMatch.Captures[0].Value : null;

        var cssRegex = new Regex("(/code/index.\\w+.css)");
        var cssMatch = cssRegex.Match(indexHtml);
        var cssUrl = cssMatch != null && cssMatch.Captures.Count > 0 ? cssMatch.Captures[0].Value : null;

        if (jsUrl == null)
        {
            logger.LogError("Failed to load fingerprinted index JS from {dir}", indexHtmlPath);
            throw new InvalidOperationException("Couldn't find fingerprinted JS in index.html");
        }

        return new FingerprintedResources(new Uri(jsUrl, UriKind.Relative), cssUrl != null ? new Uri(cssUrl, UriKind.Relative) : null);
    }
}

/// <summary>
/// A data object containing the fingerprinted resources.
/// </summary>
/// <param name="IndexJs"></param>
/// <param name="IndexCss"></param>
public record FingerprintedResources(Uri IndexJs, Uri? IndexCss);
