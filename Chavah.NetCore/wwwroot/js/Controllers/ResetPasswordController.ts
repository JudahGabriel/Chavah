namespace BitShuva.Chavah {
    export class ResetPasswordController {

        readonly email = "";
        password = "";
        readonly confirmCode: string;
        showPasswordError = false;
        isBusy = false;
        passwordResetSucccessful = false;
        passwordResetFailed = false;
        passwordResetFailedMessage = "";

        static readonly regexContainsLetterAndNumber = /^(?=.*[0-9])(?=.*[a-zA-Z])([a-zA-Z0-9]+)$/; // https://stackoverflow.com/a/7684859/536

        static $inject = [
            "accountApi",
            "$routeParams"
        ];

        constructor(private accountApi: AccountService, private $routeParams: ng.route.IRouteParamsService) {
            this.email = $routeParams["email"];
            var rawConfirmCode: string = $routeParams["confirmCode"];

            // The confirm code is generated by WebAPI. We manually replace any forward slashes with triple underscore,
            // otherwise the Angular route gets busted, even with encodeURIComponent.
            var escapedConfirmCode: string = $routeParams["confirmCode"] || "";
            this.confirmCode = escapedConfirmCode.replace(new RegExp("___", "g"), "/"); // Put the forward slash(s) back in.
        }

        get isValidPassword(): boolean {
            return !!this.password && this.password.length >= 6 && !!this.password.match(ResetPasswordController.regexContainsLetterAndNumber);
        }

        get showChangePasswordForm(): boolean {
            return !this.passwordResetSucccessful && !this.passwordResetFailed;
        }

        changePassword() {
            if (!this.isValidPassword) {
                this.showPasswordError = true;
                return;
            }

            if (!this.isBusy) {
                this.resetValidationStates();
                this.isBusy = true;
                this.accountApi.resetPassword(this.email, this.confirmCode, this.password)
                    .then(results => this.passwordResetCompleted(results))
                    .finally(() => this.isBusy = false);
            }
        }

        passwordResetCompleted(result: Server.IResetPasswordResult) {
            if (result.success) {
                this.passwordResetSucccessful = true;
            } else {
                this.passwordResetFailed = true;
                this.passwordResetFailedMessage = result.errorMessage;
            }
        }

        resetValidationStates() {
            this.passwordResetFailed = false;
            this.passwordResetFailedMessage = "";
            this.passwordResetSucccessful = false;
            this.showPasswordError = false;
        }
    }

    App.controller("ResetPasswordController", ResetPasswordController);
}